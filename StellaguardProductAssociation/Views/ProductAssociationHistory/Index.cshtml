@model  StellaguardProductAssociation.Models.ProductAssociationHistoryModels
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



    @helper SupplierNameLink(byte supplierId, string supplierName)
        {
if (true)
{
        @Html.ActionLink(@supplierName, "Edit", "SupplierChain", new { supplierId = @supplierId }, new { title = "Edit" + " " + supplierName, primarykey = supplierId });
    }
    else
    {
        @Html.ActionLink(@supplierName, "Edit", "SupplierChain", new { supplierId = @supplierId }, new { @class = "link-disabled" });
    }
}
    @helper SupplierAddressLink(string Address1, short addressId, byte SupplierId)
    {
if (addressId != null && Address1 != null && SupplierId != null)
{
    if (true)
    {
            @Html.ActionLink(Address1, "Index", "SerialNumberHistory", new { serialnumber = SupplierId, id = addressId }, new { title = "Click_to_edit_address" });
    }
    else
    {
            @Html.ActionLink(Address1, "Index", "SerialNumberHistory", new { supplierId = SupplierId, addressId = addressId }, new { @class = "link-disabled" });
        }
    }
}


<section class="panel-group">
    <header class="panel-heading">
        <div class="panel-actions">
            <p class="panel-subtitle"></p>
        </div>

        <h2 class="panel-title"><br />Product Association History</h2>

    </header>
    <div class="panel-body">

        <div id="product-list-div">
            <div style="background-color:white;">
                @using (Html.BeginForm("Index", "ProductAssociationHistory", FormMethod.Post, new { id = "filter-form" }))
            {
                    <div id="product-list-form">
                        <div class="form-horizontal" style="margin-bottom:0px;">



                            @*<div class="panel form-horizontal">*@
                            <div class="panel panel-primary form-horizontal" style="margin-bottom:0px;">
                                <div class="panel-heading">
                                    <div class="panel-actions">
                                        <a href="#" class="fa fa-caret-down"></a>

                                    </div>

                                    <h3 class="panel-title">
                                        Select Filter Criteria

                                    </h3>
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                       
                                        @Html.Label("Serial Number", new { @class = "col-xs-12 col-sm-2 control-label" })
                                        <div class="col-xs-12 col-sm-4">
                                            @Html.TextBoxFor(model => model.FilterParameters.SerialNumber, new { @class = "form-control", @placeholder = "Serial Number" })
                                        </div>
                                        @Html.Label("Product UPC", new { @class = "col-xs-12 col-sm-2 control-label" })
                                        <div class="col-xs-12 col-sm-4">
                                            @Html.TextBoxFor(model => model.FilterParameters.Upc, new { @class = "form-control", @placeholder = "Product UPC" })
                                        </div>
                                        @*<div class="form-group">*@

                                        @*</div>*@
                                    </div>
                                    <div class="form-group">

                                        <label class="col-xs-12 col-sm-2 control-label">
                                            From Date
                                        </label>
                                        <div class="col-xs-12 col-sm-2" id="dtPickerFrom">
                                            @Html.TextBoxFor(model => model.FilterParameters.FromDate, "{0:dd/mm/yyyy}", new
                       {
                           @class = "form-control date",
                           @placeholder = "From Date"
                       })
                                        </div>

                                        <div class="col-xs-12 col-sm-2" id="dtPickerTo">
                                            @Html.TextBoxFor(model => model.FilterParameters.ToDate, "{0:dd/mm/yyyy}", new { @class = "form-control date", @placeholder = "To Date" })
                                        </div>


                                        @Html.Label("Work Order", new { @class = "col-xs-12 col-sm-2 control-label" })
                                        <div class="col-xs-12 col-sm-4">
                                            @Html.TextBoxFor(model => model.FilterParameters.WorkOrder, new { @class = "form-control", @placeholder = "WorkOrder", @maxlength = "100" })
                                        </div>

                                    </div>

                                    <div class="form-group">

                                        @Html.Label("User", new { @class = "col-xs-12 col-sm-2 control-label", @style = "text-align:left;" })
                                        <div class="col-sm-4 col-xs-11">
                                            @Html.DropDownListFor(model => model.Keyword, new SelectList(Model.WorkOrderList, "", ""), "User", new { @class = "form-control" })
                                        </div>
                                        <div class="col-sm-offset-2 col-xs-12 col-sm-4">
                                            <button type="submit" class="btn btn-primary small-button" id="btnSubmit" name="btnSubmit">search</button>

                                            <span style="padding-left:10%">
                                                <input type="reset" value="reset" id="btnReset" name="BtnReset" class="btn btn-primary small-button" />
                                            </span>
                                        </div>

                                    </div>

                                    @*<div class="form-group">

                                        @Html.Label("Work Order", new { @class = "col-xs-12 col-sm-2 control-label" })
                                        <div class="col-xs-12 col-sm-4">
                                            @Html.TextBoxFor(model => model.FilterParameters.WorkOrder, new { @class = "form-control", @placeholder = "Work Order" })
                                        </div>
                
                                    </div>*@
                                </div>
                            </div>
                            @*</div>*@

                        </div>
                    </div>
                    <br />
                    <div class="validsummary"> @Html.ValidationSummary()</div>
                    @*@section popup {
                        @Html.Partial("_ModalPopup", Model.Message)
                    }*@
                }
                <div class="form-horizontal" style="margin-bottom:0px;">
                    <div class="panel panel-primary form-horizontal" style="margin-bottom:0px;">

                        @if (this.Model.WorkOrderList != null)
                        {

                            <div class="panel-heading" style="min-height:45px;">
                                <div class="panel-actions">
                                    <a href="#" class="fa fa-caret-down"></a>

                                </div>
                                <h3 class="panel-title">
                                    Product Association Details
                                    @*@AuthentiTrack.I18NResources.Serialization.Product.Index.Product_Details*@

                                </h3>
                            </div>
                            <div class="panel-body collapse in" id="volume-details-grid">
                                <div id="divGrid" class="table-responsive">
                          @if (Model != null)
                {
                    <div>
                        @if (Model.WorkOrderList.Count() != 0)
                        {

                            <div class="grid-container" id="TableGrid">
                                @{
                                    var grid = new WebGrid(Model.WorkOrderList, canPage: true, canSort: true, rowsPerPage: 10, defaultSort: "SupplierName");
                                    var currentPageIndex = grid.PageIndex;
                                    var rowsPerPage = grid.RowsPerPage;

                                }

                                @grid.GetHtml(tableStyle: "table table-bordered table-striped mb-none dataTable no-footer table-hover",
                                headerStyle: "grid-header",
                                footerStyle: "table-pager",
                                selectedRowStyle: "info",
                                htmlAttributes: new { id = "MainTable" },
                                columns: grid.Columns(
                                grid.Column("+", style: "text-right col-custom-1 width-1_3", header: "#", format: item => ((currentPageIndex * rowsPerPage) + (item.WebGrid.Rows.IndexOf(item)) + 1)),
                                grid.Column("TimeStamp", style: "col-custom-8 col-merge", header: "Time Stamp", format: (item) => SupplierNameLink(item.Id, item.timestamp)),
                                grid.Column("WorkOrder", header: "Work Order No.", style: "col-custom-10 col-merge"),
                                grid.Column("User", header: "User", style: "col-sm-4 col-xs-4 col-merge"),

                                 grid.Column(format: (item) =>
                                 {
                                     WebGrid subGrid = new WebGrid(source: item.ScannedBarcodeList, canPage: false, canSort: false);
                                     return subGrid.GetHtml(
                                         tableStyle: "table table-bordered table-striped mb-none dataTable no-footer table-hover",
                                         htmlAttributes: new { id = "SubTable" },
                                         columns: new[]{
            grid.Column("", header: "#",style:"col-sm-1 col-xs-1 col-lg-1 width-1_3 custom-td text-right",format: item1 =>item1.WebGrid.Rows.IndexOf(item1) + 1),

            grid.Column("SerialNumber", header: "Serial Number",style:"co-sm-3 col-xs-3 col-lg-3 custom-td",format: (item1)=> SupplierAddressLink(item1.SerialNumber,item1.AssociationId,item1.Id)),
            grid.Column("UPC",style:"col-sm-2 col-xs-2 col-lg-2 custom-td", header: "UPC"),
            grid.Column("ProductName", header: "Product Name",style:"col-sm-1 col-xs-1 col-lg-1 custom-td"),


                                         }
                                         );
                                 })
                                )
                                    )

                                @{
                                    if (!string.IsNullOrWhiteSpace(grid.SortColumn))
                                    {
                                        <script type="text/javascript">
                                                $('thead > tr > th > a[href*="sort=@grid.SortColumn"]').parent().append('@(grid.SortDirection == SortDirection.Ascending ? "▲" : "▼")');
                                        </script>
                                    }
                                }
                            </div>


                                    }
                    </div>

                    <br />
                        <br />
                        <br />
                                    }
                                    else
                                    {
                                        <text>NORECORDFOUND</text>
                                    }

                                </div>
                            </div>

                                                        }
                    </div>
                </div>
                <br />
            </div>
        </div>
    </div>
</section>




   

                                    
@section scripts {

    <script type="text/javascript">
                @*$(document).ready(function () {
                    if ('@Model.Message.MessageVisible.ToString().ToLower()' == 'true') {
                        var message = '@Model.Message.Message.Trim()';
                        if (message != '') {
                            $('#myModal').modal('show');
                        }
                        $(".closePopup").click(function () {
                            $("#myModal").hide();
                            if ('@Model.Message.IsGoodMessage.ToString().ToLower()' == 'true') {
                                var url = '@Url.Action("Index", "SupplierChain")';
                                window.location.href = url;
                            }
                        });
                    }
                    //MergeGridColumn();

                    $('#divGrid:visible').css("max-width", (screen.width - 75) + "px")
                    $('#divGrid:visible').css("overflow-x", "auto");
                });*@

                function MergeGridColumn() {
                    var gridrows = $("#divGrid table.table tbody tr");
                    var rowcount = gridrows.length;
                    if (gridrows.length > 0) {
                        for (i = 0; i < gridrows.length; i++) {
                            var CurrnetRowKeyId = $(gridrows[i]).find("td a").attr("primarykey");
                            var rowspan = 1;
                            if (i + 1 < gridrows.length) {
                                for (j = i + 1; j < gridrows.length; j++) {
                                    var NextRowKeyId = $(gridrows[j]).find("td a").attr("primarykey");
                                    if (NextRowKeyId == CurrnetRowKeyId) {
                                        $(gridrows[j]).find("td.col-merge").hide();
                                        rowspan++;
                                    }
                                }
                                if (rowcount > 1) {
                                    $(gridrows[i]).find("td.col-merge").attr("rowspan", rowspan);
                                }
                            }
                        }
                    }
                }

                $(document).ready(function () {
                    var size = $("#TableGrid #MainTable > thead > tr >th").size(); // get total column
                    $("#TableGrid #MainTable > thead > tr >th").last().remove(); // remove last column
                    $("#TableGrid #MainTable > thead > tr").prepend($("<th></th>").addClass("col-custom-1 width-1_3 ")); // add one column at first for collapsible column
                    $("#TableGrid #MainTable > tbody > tr").each(function (i, el) {
                        $(this).prepend(
                                $("<td></td>")
                                .addClass("subtable-expand col-custom-1 width-1_3 fa fa-plus-square-o center ")
                                .addClass("hoverEff ")
                                .attr('title', "click for show/hide address")
                            );

                        //Now get sub table from last column and add this to the next new added row
                        var table = $("table", this).parent().html();
                        //add new row with this subtable
                        $(this).after("<tr><td style='padding:15px; margin:0px;' colspan='" + (size) + "'>" + table + "</td></tr>");
                        $("table", this).parent().remove();
                        // ADD CLICK EVENT FOR MAKE COLLAPSIBLE
                        $(".hoverEff", this).on("click", function () {

                            debugger;
                            $(this).parent().closest("tr").next().slideToggle(100);
                            if ($(this).hasClass("fa-plus-square-o")) {
                                $(this).removeClass("fa fa-plus-square-o");
                                $(this).addClass("fa fa-minus-square-o");
                            }
                            else {
                                $(this).removeClass("fa fa-minus-square-o");
                                $(this).addClass("fa fa-plus-square-o");

                            }
                            $(this).toggleClass("subtable-expand subtable-collapse  ");

                        });
                    });

                    //by default make all subgrid in collapse mode
                    $("#TableGrid #MainTable > tbody > tr td.subtable-expand").each(function (i, el) {
                        $(this).toggleClass("subtable-expand subtable-collapse");
                        $(this).parent().closest("tr").next().slideToggle(100);
                    });
                    $('.btn-delete').unbind('click').bind('click', function () {

                        var confirmDelete = confirm('@Html.Raw("Delete")');

                        return confirmDelete;
                    });
                });

                $('#Keyword').keypress(function (e) {
                    var code = (e.keyCode ? e.keyCode : e.which);
                    if (code == 13) {
                        $("#frmSearch").submit();
                    }
                });

    </script>

<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script src="~/Scripts/jquery.timepicker.js"></script>
<link href="~/Content/bootstrap-datepicker.css" rel="stylesheet" />
<script src="~/Scripts/maskedit.js"></script>
<script type="text/javascript">
        var message = "";
        //var avoidOnChange = false;



        $(document).ready(function () {

            $(".closePopup").click(function () {
                $("#myModal").hide();
                $('#myCustomSummary').html('');
                $('.customsummary').html('');

            });

            //// Change collapse/expand button icon on collapse/expand events
            //$(".panel-body").on('shown.bs.collapse', function () {
            //    $(this).parent().find('.collapseTrigger').removeClass('glyphicon-plus');
            //    $(this).parent().find('.collapseTrigger').addClass('glyphicon-minus');
            //});
            //$(".panel-body").on('hidden.bs.collapse', function () {
            //    $(this).parent().find('.collapseTrigger').removeClass('glyphicon-minus');
            //    $(this).parent().find('.collapseTrigger').addClass('glyphicon-plus');
            //});

            if ($("#volume-details-grid").val() != null) {
                $('#filter').collapse('hide');
            }

            @*if ('@Model.Message.MessageVisible.ToString().ToLower()' == 'true') {
                var message = '@Html.Raw(Model.Message.Message.Trim())';
                if (message != '') {
                    $('#myModal').modal('show');
                }
            }*@


            @*message = '@Model.Message.Message';*@

            if (message != "") {
                $('.customsummary').text('');
                $('.customsummary').text(message);
                $('#myModal').modal('show');
            }

            $("#dtPickerTo .date").datepicker({
                'format': 'mm/dd/yy',
                'autoclose': true
            });

            $("#dtPickerFrom .date").datepicker({
                'format': 'mm/dd/yy',
                'autoclose': true,
            });

            $("#btnSubmit").click(function () {


                var fromDate = $("#FromDate").val();
                var toDate = $("#ToDate").val();
                var shippmentId = $("#ShipmentId").val();
                var SourceId = $("#SourceId").val();
                var Batch = $("#Batch").val();
                var DestinationId = $("#DestinationId").val();
                var ProductId = $("#ProductId").val();


                // var qrCode = $("#HumanReadableCode").val();
                // var sscc = $("#SSCC").val();
                // var statusId = $("#SelectedStatusId").val();

                if (fromDate == "" && toDate == "" && shippmentId == "" && SourceId == 0 && Batch == "" && DestinationId == 0 && ProductId == 0) {
                    debugger;
                    alert(AuthentiTrack.Utility.SystemMessage.TRACKHISTORYREQUIREDVALIDATION);
                    $('.customsummary').text('');
                    $('.customsummary').append('TRACKHISTORYREQUIREDVALIDATION');
                    $('#myModal').modal('show');
                    return false;
                }

                $("#divErrortext").text('');
                if (!$("#frmHistory").valid()) {
                    $(".validsummary").show();

                    $("#myCustomSummary").html($(".validsummary").html()); //Added for passing in partial view
                    $(".validsummary").hide(); //Added for clear from screen RJ
                    $(".customsummary").hide();
                    $('#myModal').modal('show');
                    $('#myModal button:nth-child(1)').focus();
                    return false;
                }

                // Validate if expiry date range lies within 90 days
                var fromDateString = $('#FromDate').val();
                var toDateString = $('#ToDate').val();
                var fromDate = new Date(fromDateString);
                var toDate = new Date(toDateString);

                if (fromDateString != '') {
                    var toDateLimit = new Date($('#FromDate').val());
                    toDateLimit.setDate(toDateLimit.getDate() + 90);

                    if (toDateString != '') {
                        if (toDate > toDateLimit) {
                            $('.customsummary').text('');
                            $('.customsummary').append('Date_Difference_Error_Message');
                            $('#myModal').modal('show');
                            return false;
                        }
                    }

                    else {
                        $('#ToDate').datepicker('setDate', toDateLimit);
                    }
                }

                else if (toDateString != '') {
                    var fromDateLimit = new Date($('#ToDate').val());
                    fromDateLimit.setDate(fromDateLimit.getDate() - 90);

                    if (fromDateString != '') {
                        if (fromDate < fromDateLimit) {
                            $('.customsummary').text('');
                            $('.customsummary').append('Date_Difference_Error_Message');
                            $('#myModal').modal('show');
                            return false;
                        }
                    }

                    else {
                        $('#FromDate').datepicker('setDate', fromDateLimit);
                    }
                }

                return true;
            });


            $('#btnReset').click(function () {
                //$('input[type="text"]').val('');
                var url = '@Url.Action("Index", "DSCSAReport")';
                window.location.href = url;
            });

            $('#gridContent:visible').css("max-width", (screen.width - 100) + "px")
            $('#gridContent:visible').css("overflow-x", "auto")


        });

        $(".myLink").mousedown(function () {

            var Issr = $('#IsSerialized').is(':checked');

            this.href = this.href.replace("xx", Issr);
        });




</script>
}