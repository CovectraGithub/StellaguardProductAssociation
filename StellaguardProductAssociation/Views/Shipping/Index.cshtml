@model  StellaguardProductAssociation.Models.ShippingViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm("Index", "Shipping", FormMethod.Post, new { id = "frm", name = "frm" }))
{

    <div class="row">
        <div class="col-lg-12">
            <section class="panel">
                <header class="panel-heading">
                    <div class="panel-actions">
                        <p class="panel-subtitle">@Html.Label("*", new Dictionary<string, object> { { "class", "errormessage" } })</p>
                    </div>
                    <div>
                        <span id="ErrorMessage">@Html.DisplayFor(m => m.Message)</span><span class="text-info"> </span>
                    </div>

                    <h2 class="panel-title"><br />Shipping</h2>

                </header>
                <div class="panel-body">


                    <div id="divShipbySerialCode">
                        <section class="">

                            <div class="panel-body">
                                <div class="form-group" id="divitemLable">
                                    <div class="col-md-2 col-xs-12 required">
                                        @Html.LabelFor(model => model.SerialCodes, new { @id = "lblHRCodes", @class = "col-md-12 control-label" })
                                    </div>
                                    <div class="col-xs-12 col-md-9">
                                        @Html.TextAreaFor(model => model.SerialCodes, new { rows = 5, cols = 21, @class = "form-control" })

                                    </div>

                                    <div class="col-sm-offset-2 col-sm-8 col-xs-12">
                                        <span id="count" class="label label-info count-label">0</span><span class="text-info">
                                            ItemsScanned
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </section>


                    </div>
                    <br />
                    <div class="form-group required">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.ShipmentDateTime, new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-8" style="float:left">
                                @Html.TextBoxFor(model => model.ShipmentDateTime, new { @class = "form-control date datetimepicker" })
                            </div>

                        </div>
                        <div class="col-sm-6">
                            @Html.Label("Time Zone", new { @class = "col-sm-3 control-label" })

                            <div class="col-sm-8" style="float:left">
                                @Html.DropDownList("timezone1", new SelectList(Model.timeZoneList, "Value", "Text"), new { @class = "form-control" })
                            </div>

                        </div>
                    </div>

                    <div class="form-group required">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.OrderNumber, new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-8" style="float:left">
                                @Html.TextBoxFor(model => model.OrderNumber, new { @class = "form-control" })

                            </div>

                        </div>
                        <div class="col-sm-6 form-group" id="divitemLable">
                            <audio id="xyz" src="~/assets/images/beeps_notification.mp3" preload="auto"></audio>
                            <div class="col-sm-3"></div>
                            <div class="col-sm-8" style="float:left">
                                <button type="submit" class="btn btn-primary large-button btnSubmit validate-form" name="save" onclick="return checkvalid(this);" id="Save">Ship</button>
                            </div>

                        </div>
                    </div>





                    @Html.Hidden("timezone")
                    @*@Html.Hidden("HtmlValue")
                        @Html.HiddenFor(x => x.IsDropShipment)*@



                    <div class="validsummary"> @Html.ValidationSummary()</div>



                </div>
                @*@section popup {
                        @Html.Partial("_ModalPopup", Model.Message)
                    }*@

            </section>
        </div>
    </div>


    <style type="text/css">
        .left-padding {
        }

        .bootstrap-datetimepicker-widget {
            min-width: 400px;
        }
    </style>
}
<script src="@Url.Content("~/Scripts/bootstrap.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment-timezone.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment-timezone-with-data-2012-2022.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/bootstrap-datetimepicker.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(document).ready(function () {

        var abbrs = {
            AST: 'Atlantic Standard Time',
            EST: 'Eastern Standard Time',
            EDT: 'Eastern Daylight Time',
            CST: 'Central Standard Time',
            CDT: 'Central Daylight Time',
            MST: 'Mountain Standard Time',
            MDT: 'Mountain Daylight Time',
            PST: 'Pacific Standard Time',
            PDT: 'Pacific Daylight Time',
            AKST: 'Alaska Time',
            AKDT: 'Alaska Daylight Time',
            HST: 'Hawaiian Standard Time',
            HST: 'Dateline Standard Time',
            HAST: 'HAWAII-ALEUTIAN STANDARD TIME',
            HADT: 'HAWAII-ALEUTIAN DAYLIGHT TIME',
            SST: 'SAMOA STANDARD TIME',
            SDT: 'SAMOA DAYLIGHT TIME',
            CHST: 'CHAMORRO STANDARD TIME',
            IST: 'India Standard Time',
            MSK: 'Moscow Time',
            ADT: 'Aleutian Daylight Time',
            //HDT: 'Hawaii–Aleutian Daylight Time',
        };

        moment.fn.zoneName = function () {
            var abbr = this.zoneAbbr();
            return abbrs[abbr] || abbr;
        };
        //SET THE CURRENT DATE IN SHIPMENT DATE
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var time = new Date();
        time = time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true });
        var today = mm + '/' + dd + '/' + yyyy + ' ' + time;
        $("#ShipmentDateTime").val(today);
        //SET THE CURRENT DATE IN SHIPMENT DATE



        var objdatetime = new Date();
        var timezone1 = objdatetime.toTimeString();   // Output like 13:56:48 UTC+0530 , u need to extract UTC+0530 from it
        var month = objdatetime.getUTCMonth() + 1; //months from 1-12
        var year = objdatetime.getUTCFullYear(); // Get the year
        var zone_name = moment.tz.guess(); // Get the zone name
        var timezone = moment.tz(zone_name).zoneAbbr()
        //var name = moment.tz([year, month], zone_name).format('zz');

        if (zone_name == "America/New_York") {
            $("#timezone1").val(moment.tz([year, month], zone_name).format('zz')); // SET the DROPDOWN FOR EST TIME ZONE
        }
        else
            $("#timezone1").val(new Date().toString().match(/\(([^)]+)\)/)[1]); // AND FOR OTHER THIS VALUE IS SET

    });

    $('#ShipmentDateTime').datetimepicker({
        sideBySide: true,

    });
    var Iskeypress = false;
    var validResult = true;
    var countLabel = $("#count");
    var countLabel2 = $("#ErrorMessage");
    var compAddress = null;
    var IsSummary = false;



    $("#SerialCodes").focusout(function () {
        var count = checkCount($("#SerialCodes").val());
        countLabel.html(count);
        // ValidateSerialCode($("#SerialCodes").val())


    });

    function checkvalid(e) {
        var frmValid = true;
        var isValid = true;
        if ($('#timezone1').val() == null) {
            frmValid = false;
        }
        isValid = ValidateSerialCode($("#SerialCodes").val());

        console.log("isValid value " + isValid);
        if (isValid == true) {

            if (validResult == true) {
                var tz = $("#timezone1 option:selected").val();
                $("#timezone").val(tz);
                //alert('In valid condition');
                return true;
            }
            else {
                return false;
            }
        }
        else {
            console.log("false");
            return false;
        }
    }

    function ValidateSerialCode(serialNumbersStr) {

        debugger;
        var currentarray = [];
        var isValid = false;
        // console.log(serialNumbersStr);
        var strSerial = serialNumbersStr.split("\n")
        if (strSerial != null && strSerial.length > 0) {

            for (let j = 0; j < strSerial.length; j++) {
                //console.log("value of strSerial" + j + "string value " + strSerial[j]);
                var str = strSerial[j].split('8200https:');
                for (let i = 0; i < str.length; i++) {

                    //  console.log("value of i" + i + "string value " + str[i]);
                    if (str[i].toLowerCase().startsWith('21')) {
                        var FinalSN = str[i].substring(2);

                        //var FinalSN;
                        //var TempSN = UPCSN[0];
                        //console.log("FinalUPC" + FinalUPC);
                        //if (FinalUPC.length > 12) {
                        //    FinalSN = UPCSN[0].substring(2);
                        //}
                        //else {
                        //    FinalSN = UPCSN[1].substring(2);

                        //}
                        console.log("final SN" + FinalSN);
                        currentarray.push(FinalSN)
                    }


                }
            }
        }
        //console.log("currentarray" + currentarray);

        var i;
        var len = currentarray.length;
        var obj = {};
        var duplicates = [];



        for (i = 0; i < len; i++) {

            if (!obj[currentarray[i]]) {

                obj[currentarray[i]] = 1;

            }

            else {
                obj[currentarray[i]]++;

                if (obj[currentarray[i]] == 2) {
                    duplicates.push(currentarray[i]);
                }
            }

        }

        if (duplicates.length > 0) {

            var duplicatelen = duplicates.length, j = 0;
            for (j; j < duplicatelen; j++) {
                if (ErrorMessage.length > 0) {
                    ErrorMessage = "<br/><br/>" + duplicates[j];
                }
                else {

                    ErrorMessage = "Duplicate serial # found" + "<br/>" + duplicates[j];
                }

            }
            document.getElementById('xyz').play();
            alert(ErrorMessage);
            return false;
        }
        else {
            return true;
        }
    }

    function CheckValidSerialNumber(serialNumberarray) {
        var pattern = '^(\\d{' + length + '}$)';
        var patt = new RegExp(pattern);
        ErrorMessage = "";
        var len = serialNumberarray.length, i = 0;
        for (i; i < len; i++) {
            var strlen = serialNumberarray[i];

            if (strlen != "") {
                if (strlen.match(regex, 'm') == null) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + "<br/>" + serialNumberarray[i];
                    }
                    else {
                        ErrorMessage = "<br/><br/>" + serialNumberarray[i];
                    }

                }
            }
        }

        if (ErrorMessage != "") {
            document.getElementById('xyz').play();
            alert(ErrorMessage);
            return false;
        }
        else
            return true;
    }



</script>



