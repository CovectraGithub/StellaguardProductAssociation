@model  StellaguardProductAssociation.Models.ShippingViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm("Index", "Shipping", FormMethod.Post, new { id = "frm", name = "frm" }))
{

    <div class="row">
        <div class="col-lg-12">
            <section class="panel">
                <header class="panel-heading">
                    <div class="panel-actions">
                        <p class="panel-subtitle">@Html.Label("*", new Dictionary<string, object> { { "class", "errormessage" } })</p>
                    </div>
                    @*<div>
                        <span id="ErrorMessage" >@Html.DisplayFor(m => m.Message)</span><span class="text-info"> </span>
                    </div>*@

                    <h2 class="panel-title"><br />Shipping</h2>

                </header>
                <div class="panel-body">


                    <div id="divShipbySerialCode">
                        <section class="">

                            <div class="panel-body">
                                <div class="form-group" id="divitemLable">
                                    <div class="col-md-2 col-xs-12 required">
                                        @Html.LabelFor(model => model.SerialCodes, new { @id = "lblHRCodes", @class = "col-md-12 control-label" })
                                    </div>
                                    <div class="col-xs-12 col-md-9">
                                        @Html.TextAreaFor(model => model.SerialCodes, new { rows = 5, cols = 21, @class = "form-control",style= "width: 900px;" })

                                    </div>

                                    <div class="col-sm-offset-2 col-sm-8 col-xs-12">
                                        <span id="count" class="label label-info count-label">0</span><span class="text-info">
                                            Items Scanned
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </section>


                    </div>
                    <br />
                    <div class="form-group required">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.ShipmentDateTime, new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-8" style="float:left;">
                                @Html.TextBoxFor(model => model.ShipmentDateTime, new { @class = "form-control date datetimepicker",Style= "margin-left: 55px;" })
                            </div>

                        </div>
                        <div class="col-sm-6">
                            @Html.Label("Time Zone", new { @class = "col-sm-3 control-label" })

                            <div class="col-sm-8" style="float:left;">
                                @Html.DropDownList("timezone1", new SelectList(Model.timeZoneList, "Value", "Text"), new { @class = "form-control",
                               Style = "margin-right:16px;" })
                            </div>

                        </div>
                    </div>

                    <div class="form-group required">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.OrderNumber, new { @class = "col-sm-3 control-label"})
                            <div class="col-sm-8" style="float:left;">
                                @Html.TextBoxFor(model => model.OrderNumber, new { @class = "form-control",Style= "margin-left: 55px;" })

                            </div>

                        </div>
                        <div class="col-sm-6 form-group" id="divitemLable">
                            <audio id="xyz" src="~/assets/images/beeps_notification.mp3" preload="auto"></audio>
                            <div class="col-sm-3"></div>
                            <div class="col-sm-8" style="float:left">
                                <button type="submit" class="btn btn-primary large-button btnSubmit validate-form" name="save" onclick="checkvalid(this);" id="Save">Ship</button>
                            </div>

                        </div>
                    </div>





                    @Html.Hidden("timezone")
                    @*@Html.Hidden("HtmlValue")
                        @Html.HiddenFor(x => x.IsDropShipment)*@



                    <div class="validsummary" hidden="hidden"> @Html.ValidationSummary()</div>



                </div>
                @section popup {
                        @Html.Partial("_ModalPopup", Model.Message)
                    }

            </section>
        </div>
    </div>

    
    <style type="text/css">
        .left-padding {
        }
        .bootstrap-datetimepicker-widget {
            min-width: 400px;
        }
    </style>
}
<script src="@Url.Content("~/Scripts/bootstrap.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment-timezone.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment-timezone-with-data-2012-2022.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/bootstrap-datetimepicker.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(document).ready(function () {

        var abbrs = {
            AST: 'Atlantic Standard Time',
            EST: 'Eastern Standard Time',
            EDT: 'Eastern Daylight Time',
            CST: 'Central Standard Time',
            CDT: 'Central Daylight Time',
            MST: 'Mountain Standard Time',
            MDT: 'Mountain Daylight Time',
            PST: 'Pacific Standard Time',
            PDT: 'Pacific Daylight Time',
            AKST: 'Alaska Time',
            AKDT: 'Alaska Daylight Time',
            HST: 'Hawaiian Standard Time',
            HST: 'Dateline Standard Time',
            HAST: 'HAWAII-ALEUTIAN STANDARD TIME',
            HADT: 'HAWAII-ALEUTIAN DAYLIGHT TIME',
            SST: 'SAMOA STANDARD TIME',
            SDT: 'SAMOA DAYLIGHT TIME',
            CHST: 'CHAMORRO STANDARD TIME',
            IST: 'India Standard Time',
            MSK: 'Moscow Time',
            ADT: 'Aleutian Daylight Time',
            //HDT: 'Hawaii–Aleutian Daylight Time',
        };

        moment.fn.zoneName = function () {
            var abbr = this.zoneAbbr();
            return abbrs[abbr] || abbr;
        };
        //SET THE CURRENT DATE IN SHIPMENT DATE
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var time = new Date();
        time = time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true });
        var today = mm + '/' + dd + '/' + yyyy + ' ' + time;
        $("#ShipmentDateTime").val(today);
        //SET THE CURRENT DATE IN SHIPMENT DATE



        var objdatetime = new Date();
        var timezone1 = objdatetime.toTimeString();   // Output like 13:56:48 UTC+0530 , u need to extract UTC+0530 from it
        var month = objdatetime.getUTCMonth() + 1; //months from 1-12
        var year = objdatetime.getUTCFullYear(); // Get the year
        var zone_name = moment.tz.guess(); // Get the zone name
        var timezone = moment.tz(zone_name).zoneAbbr()
        //var name = moment.tz([year, month], zone_name).format('zz');

        if (zone_name == "America/New_York") {
            $("#timezone1").val(moment.tz([year, month], zone_name).format('zz')); // SET the DROPDOWN FOR EST TIME ZONE
        }
        else
            $("#timezone1").val(new Date().toString().match(/\(([^)]+)\)/)[1]); // AND FOR OTHER THIS VALUE IS SET

    });
    $('#ShipmentDateTime').datetimepicker({
        sideBySide: true,

    });
    var Iskeypress = false;
    var validResult = true;
    var countLabel = $("#count");
    var countLabel2 = $("#ErrorMessage");
    var compAddress = null;
    var IsSummary = false;


    var x;
    var UPCSNArr = [];
    var callfun;
    var twolist;

    var final = [];
    var finallist;
    var countLabel = $("#count");
    //  var countLabel = $("#count");

    var tdCount = $("#pkgList").find("table>tbody tr");
    var i = tdCount.length;
    var countLabel = $("#count");
    countLabel.html(i);


    $(document).ready(function () {



        if ('@Model.Message.MessageVisible.ToString().ToLower()' == 'true') {
            //debugger;
            var message = '@Model.Message.Message.Trim()';
            if (message != '') {
                $('#myModal').modal('show');
                $('#myModal button:nth-child(1)').focus();
            }
        }
        $('.closePopup').click(function () {
            if ('@Model.Message.IsGoodMessage.ToString().ToLower()' == 'true') {
                //debugger;
                var url = '@Url.Action("Index", "Shipping")';
                window.location.href = url;
            }
            else {
                $("#myModal").hide();
            }
        });

        return true;
    });




    function listToMatrix(list, elementsPerSubArray) {
        var matrix = [], i, k;

        for (i = 0, k = -1; i < list.length; i++) {
            if (i % elementsPerSubArray === 0) {
                k++;
                matrix[k] = [];
            }

            matrix[k].push(list[i]);
        }

        return matrix;
    }
    

    function isItemInArray(twolist, currentarray) {
        //debugger;
        console.log("two list length" + twolist.length)
        for (var i = 0; i < twolist.length; i++) {
            // This if statement depends on the format of your array
            console.log("two list value" + twolist[i][1]);
            if (twolist[i][1] == currentarray[1]) {
                console.log("Found it");
                return true;   // Found it

            }
        }
        console.log("Not Found it");
        return false;   // Not found
    }

    $("#SerialCodes").focusout(function () {
        var count = checkCount($("#SerialCodes").val());
        countLabel.html(count);
       // ValidateSerialCode($("#SerialCodes").val())
      

    });
    function checkvalid(e) {
        //debugger;

        var frmValid = true;
        if ($('#timezone1').val() == null) {


            $('.customsummary').text('');
            $('.customsummary').append("Please select TimeZone.");
            $('#myModal').modal('show');
            frmValid = false;
        }
        if (validResult == true) {
            var tz = $("#timezone1 option:selected").val();
            $("#timezone").val(tz);
            //alert('In valid condition');
            ValidateSerialCode();
            return true;
        }
        else {
            return false;
        }

    }

    function ValidateSerialCode()
    {
        //debugger;
        var textvalue = $("#SerialCodes").val();
        
        $("#ErrorMessage").hide();
        var numberOfLineBreaks = (textvalue.match(/\n/g) || []).length;
        var userBatchNumber = $('#SerialCodes').val();
        var serialnumber;
        var invalid = false;
        var str = textvalue.split('8200https:');
        var UPCSN = str[0].split('\n')
        var FinalUPC = UPCSN[0];
        var FinalSN;
        var TempSN = UPCSN[0];
        if (textvalue == null || textvalue == "")
        {
            $('.customsummary').text('');
            $('.customsummary').append("Please scan atleast one Serial Number");
            $('#myModal').modal('show');
        }
        if (FinalUPC.length > 12) {
            FinalSN = UPCSN[0].substring(2);
        }
        else {
            FinalSN = UPCSN[1].substring(2);

        }
        if (!textvalue.includes('8200https:')) {
            FinalSN = UPCSN[1];
        }
        var currentarray = [];
        currentarray.push(FinalUPC, FinalSN)
        UPCSNArr=(FinalUPC,FinalSN);
        twolist = listToMatrix(UPCSNArr, 2);
        console.log("two list values" + twolist);
        if (FinalSN.length == 12) {
            invalid = true;
            document.getElementById('xyz').play();
            alert("Invalid Serial Number Scan Please Scan Again.")
            $('#SerialCodes').val("");
        }
        var counter = 1; var ProductName; var ErrorMessage = "";
        if (invalid) {
            if (ErrorMessage != "") {
                $(".validsummary").hide();
                $('.customsummary').empty();
                $("#myCustomSummary").empty();
                $(".customsummary").show();
                $("#myModalLabel").html("");
                $("#myModalLabel").html('Fail');
                $("#customdiv").removeClass("SuccessMessage");
                $("#customdiv").removeClass("validation-summary-errors");
                $("#customdiv").addClass("validation-summary-errors");
                $('.customsummary').append(ErrorMessage);
                $('#myModal').modal('show');
                $('#myModal button:nth-child(1)').focus();
            }
            return false;
        }
        currentarray.push(FinalSN)
        console.log("current array" + currentarray);
        var result = isItemInArray(twolist, currentarray);

        if (result) {
            invalid = true;
            document.getElementById('xyz').play();
            $('#SerialCodes').val("");
            $('.customsummary').text('');
            $('.customsummary').append(" Serial Number - " + currentarray[1] + "  Already Scanned.");
            $('#myModal').modal('show');
            //alert("  Serial Number - " + currentarray[1] + "  Already Scanned.")

        }
        if (userBatchNumber == "") {
            //$("#ErrorMessage").show()
            //ErrorMessage = "Please Scan Again."
            //countLabel2.html(ErrorMessage);
            $('#SerialCodes').val("");
            $('.customsummary').text('');
            $('.customsummary').append(" Please Scan Again.");
            $('#myModal').modal('show');
            invalid = true;
        }
        if (!invalid)
            {
            $('#SerialCodes').val("");
        $('.customsummary').text('');
        $('.customsummary').append(" Serial Number - " + currentarray[1] + "  Already Scanned.");
        $('#myModal').modal('show');
        }
        else
            return false;
    }
    $("#SerialCodes").focus();

</script>



